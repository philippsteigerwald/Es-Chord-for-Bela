import("stdfaust.lib");
import("basics.lib");
//declare options "[midi:on][nvoices:8]"; // toggle on in case of midi control !! Change [BELA: ANALOG_XX] with [midi:ctrl XX] to control the patch via MIDI !!

//------------------------------------ INTERFACE ----------------------------------------------------------------------


// We kept all available parameters in the interface as the Bela Board is the intended plattform for this Project. For the Bela board you get to pick a limited number of parameters to control, so we didnt limit it in the interface. This is why the interface doesnt look as nice and well arranged. The goal is to to find the parameter as fast as possible in the code not in the interface. 
// It is maybe helpful to take a look at the process function before attempting to follow the logic of the implementations. See below.
// process = secondharm,thirdharm,fourthharm,fifthharm,sixthharm,seventhharm,eightharm,ninethharm,tenthharm,eleventhharm :>   /(1.5)*envelopeharm + fundamental :>/(1)*envelopemaster <:_,_;



//------------------------------------ PARAMETER -----------FUNDAMENTAL-----------------------------------------------


// Trigger the fundamental tone and the masterenvelope by an external trigger, such as CV or MIDI
gatef   = hslider("[0]ON/OFF (ASR Envelope)[BELA:DIGITAL_15]",0,0,1,1);
//gatef =  1; // toggle on for an ongoing output to fiddle with the settings

// Choice of our sound source, dependant on the fundamental frequency f0 and its reverberation time. Only returns a value greater 0 at the process function when gatef is triggerd. 
fundamental =   fundamentalvolume *  sy.combString(f0,rtc,gatef);

// Adjust the volume of the fundamental frequency
fundamentalvolume = hslider("Volume_Fundamental",0.7,0,1,0.01); 




//------------------------------------ PARAMETER -----------MUSICAL ACCOMPANIENT (OVERTONES)---------------------------


// Determines the fundamental frequency f0
freq = hslider("Fundamental_Frequency [BELA: ANALOG_6]",200,50,1000,0.01); //freq = f0 after Modulation is applied, see below. 

// Adjust the reverbation time of of the comb string model
rtc = hslider("Reverberation Time Comb [BELA: ANALOG_7]",5,0.1,50,1);

// Code to get an actual envelope as trigger for the overtones and not just a gate
envelopeharm =en.ar(attack,release,triggerE): si.smoo; 
attack = hslider("Harmonics-Attack", 0.005, 0, 1, 0.001);
release = hslider("Harmonics-Release", 0.1, 0.01, 1, 0.01);

// Implementation of the actual impulse that triggers the envelope and the S & H Function
triggerE =   ba.beat(enveloperate);
triggerSH =   ba.beat(shrate); 

// Rate of which the envelope is triggered and ultimately an overtone
enveloperate= hslider("Harmonics Envelope Rate[BELA: ANALOG_0]", 100, 100, 1200, 50); 

// Rate of which the white noise generator picks a value
shrate= hslider("Harmonics Pitch SH-Rate [BELA: ANALOG_1]", 200, 100, 1200, 50); 

// Adjust the volume of the musical accompaniment
harmonicvolume = hslider("Volume_Musical_Accompaniment ",100,0,200,1); 




//------------------------------------ PARAMETER -----------MASTER---------------------------------------------------


// Code to get an actual envelope as trigger for the final process function and not just a gate. 
envelopemaster = en.adsr(attackf,decayf,sustainf,releasef,gatef) *gain; //NOTE: We will only hear sound at all when gatef recieves a value as this is the envelope for the Process Function.
attackf = hslider("Master Attack[BELA: ANALOG_2] ", 0.005, 0, 1, 0.001);
decayf = hslider("Master Decay ", 0.1, 0, 1, 0.001); 
sustainf = hslider("Master Sustain", 0.7, 0, 1, 0.001);
releasef = hslider("Master Release [BELA: ANALOG_3]", 0.3, 0, 1, 0.001);

// Gain of the master 
gain = hslider("Master Gain",0.5,0,1,0.01); 





// -------------------------------------MODULATION IMPLEMENTATION ------------------------------------------------------


// Adjust Modulatuion Index
ind_1    = hslider("Z_FM Modulation Index [BELA: ANALOG_5]",-1,-1,1000,0.1); 
// Adjust Modulator Frequency
f2 =  hslider("Z_FM Modulator Frequency [BELA: ANALOG_4]",60,1,1000,0.01) : si.smoo; 
// Make the fundamental frequency dependant on f2 and ind_1. For ind_1 = 0 we get a non modulated frequency: f0 = freq.
f0 = freq + (os.osc(f2)*ind_1 )*envelopemaster; 





//------------------------------------ CASE PICKER AND SAMPLE & HOLD ------------------------------------------------------------------


// The Case Picker will pick a random case which will determine the played musicial acompanient. See Musicial Acompanient Synthesis below.
// A new case is chosen with the rate triggerSH. This will result in a change of the musicial acompanient.

// White Noise Generator. For each trigger input pick a random value between -1 and 1. 
sh= no.noise: ba.sAndH(triggerSH);  

// Take absolut values of -1 to 1
sh_abs = abs(sh); 


// Case determination depending on the picked values of the sample and hold of the white noise generator. The ranges have been adjusted to counter match the gaussian distribution of the sh function with the goal of an even probability of activation between all cases.

// Read as: When sh_abs is greater then 0 then input value of case 1_1. Case 1_1 is only not 0 at times where sh_abs is smaller then 0.16. Thus activating case1 which would be the trigger for an addititonal octave only when sh_abs outputs an value between 0 and 0.16.

case1 = ba.if(sh_abs>=(0),case1_1,0);
    case1_1 = ba.if(sh_abs <(0.16),1,0);

case2 = ba.if(sh_abs>=(0.16) ,case2_1,0);
    case2_1 = ba.if(sh_abs<(0.29),1,0);
    
case3 = ba.if(sh_abs>=(0.29),case3_1,0);
    case3_1 = ba.if(sh_abs <(0.39),1,0);

case4 = ba.if(sh_abs>=(0.39) ,case4_1,0);
    case4_1 = ba.if(sh_abs<(0.46),1,0);
       
case5 = ba.if(sh_abs>=(0.46),case5_1,0);
    case5_1 = ba.if(sh_abs <(0.5),1,0);
    
case6 = ba.if(sh_abs>=(0.5) ,case6_1,0);
    case6_1 = ba.if(sh_abs<(0.54),1,0);
       
case7 = ba.if(sh_abs>=(0.54),case7_1,0);
    case7_1 = ba.if(sh_abs <(0.61),1,0);
    
case8 = ba.if(sh_abs>=(0.61) ,case8_1,0);
    case8_1 = ba.if(sh_abs<(0.71),1,0);

case9 = ba.if(sh_abs>=(0.71),case9_1,0);
    case9_1 = ba.if(sh_abs <(0.84),1,0);
    
case10 = ba.if(sh_abs>=(0.8) ,case10_1,0);
    case10_1 = ba.if(sh_abs<=(1),1,0);




//------------------------------------ MUSICAL ACCOMPANIENT SYNTHESIS -----------------------------------------------------


// Synthesis of the musical accompaniment with chords. Only one of these cases is triggered at a time with the rate of the TriggerE. These chords can be triggered multiple times with the same output until there is a new input from the S&H, which is dependant on the rate of the TriggerSH (case1, etc gets the value of 1). Of course these will also only play when there is an input for a fundamental frequency so f0 =/= 0 (automated or triggered manualy)

secondharm =  case1 * sy.combString(f0*2,rtc,triggerE); //Oktave
thirdharm = case2 * sy.combString(f0*1.5,rtc,triggerE); // Quint
fourthharm = (2/3) * case3 *(sy.combString(f0*5/4,rtc,triggerE)+sy.combString(f0*1.5,rtc,triggerE)); // Dur triad
fifthharm =  (2/3) * case4 *(sy.combString(f0*6/5,rtc,triggerE)+sy.combString(f0*1.5,rtc,triggerE));  //Moll triad
sixthharm = (2/3) * case5 *(sy.combString(f0*5/4,rtc,triggerE)+sy.combString(f0*16/9,rtc,triggerE)); // Dur7
seventhharm =  (2/3) * case6 *(sy.combString(f0*6/5,rtc,triggerE)+sy.combString(f0*16/9,rtc,triggerE)); // Moll7
eightharm =  (2/3) * case7 *(sy.combString(f0*5/4,rtc,triggerE)+sy.combString(f0*15/8,rtc,triggerE)); // Dur k7
ninethharm =  (2/3) * case8 *(sy.combString(f0*6/5,rtc,triggerE)+sy.combString(f0*15/8,rtc,triggerE)); // Moll k7
tenthharm =  (1/3) * case9 *(sy.combString(f0*5/4,rtc,triggerE)+sy.combString(f0*1.5,rtc,triggerE)+ sy.combString(f0*15/8,rtc,triggerE)); // tetrachord Dur7
eleventhharm =  (1/3) * case10 *(sy.combString(f0*6/5,rtc,triggerE)+sy.combString(f0*1.5,rtc,triggerE)+sy.combString(f0*15/8,rtc,triggerE)); // tetrachord Moll7




//------------------------------------ PROCESS FUNCTION --------------------------------------------------------------

process = secondharm,thirdharm,fourthharm,fifthharm,sixthharm,seventhharm,eightharm,ninethharm,tenthharm,eleventhharm :>   /(1.5)*envelopeharm + fundamental :>/(1)*envelopemaster <:_,_;

